
@page "/usersgrid"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components



<FluentDataGrid id="defaultGrid"
                Items=RowsGrid.AsQueryable()
                GridTemplateColumns="1fr 1fr"
                TGridItem=SampleGridData
                OnRowClick="HandleRowClick"
                OnRowFocus="HandleRowFocus"
                OnCellClick="HandleCellClick"
                OnCellFocus="HandleCellFocus"
                RowSize="@DataGridRowSize.Medium">
    <TemplateColumn Title="Name">
        <FluentTextField @bind-Value="@context!.Name" />
    </TemplateColumn>
    <TemplateColumn Title="Age">
        <FluentNumberField @bind-Value="@context!.Age" TValue="int" />
    </TemplateColumn>
</FluentDataGrid>


@code {
    public class SampleGridData
    {
        public string Name { get; set; }
        public int Age { get; set; }

        public SampleGridData(string name, int age)
        {
            Name = name;
            Age = age;
        }
    }



    List<SampleGridData> RowsGrid = new()
    {
        new SampleGridData("Rob", 19 ),
        new SampleGridData("Bob", 20 )
    };

    private void HandleRowClick(FluentDataGridRow<SampleGridData> row)
    {
        Console.WriteLine($"Row clicked: {row.RowIndex}");
        
    }

    private void HandleRowFocus(FluentDataGridRow<SampleGridData> row)
    {
        Console.WriteLine($"Row focused: {row.RowIndex}");
    }

    private void HandleCellClick(FluentDataGridCell<SampleGridData> cell)
    {
        Console.WriteLine($"Cell clicked: {cell.GridColumn}");
        //Console.WriteLine($"Column Ttile of Cell clicked: {cell.Column}");
    }

    private void HandleCellFocus(FluentDataGridCell<SampleGridData> cell)
    {
        Console.WriteLine($"Cell focused : {cell.GridColumn}");
    }






/*
@page "/usersgrid"
@rendermode InteractiveAuto
@using VSM.Client.Datamodel
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.QuickGrid;
@using Microsoft.AspNetCore.Components.Rendering;
@using QuickGridToolkit;

<PageTitle>Users</PageTitle>

<h1>Users</h1>
<div class="master-detail">
    <div class="master">
        <div class="grid">
            @*<div class="my-3">
                <ColumnSelector ColumnManager="_columnManager" SelectionChanged="SelectionChangedAsync" />
            </div>*@
            @*    Class="table table-sm table-index table-striped small table-blazor table-fit table-thead-sticky mb-0"*@
                 @*@onclick="@((ItemKey) => OnClick(ItemKey))"*@
            <QuickGrid @ref="_grid" Items="@_items.AsQueryable()" Virtualize="true" ItemSize="25"
                >
                <PropertyColumn Property="@(c => c.Name)" Sortable="true" Align="Align.Right" />
                @QuickGridColumns.Columns(_columnManager)
            </QuickGrid>
        </div>
    </div>
</div>

@code {

    private List<UserDto> _items = new();
    private ColumnManager<UserDto> _columnManager = new();
    private QuickGrid<UserDto>? _grid;

    protected override void OnInitialized()
    {
        _columnManager.AddIndexColumn();
        _columnManager.Add(new() { Property = p => p.Id });
        _columnManager.Add(new() { Property = p => p.Name });
        _columnManager.Add(new() { Property = p => p.Age });
        //_columnManager.AddCountry();

        _items = UserService.GetUsers();
    }

    private async Task SelectionChangedAsync()
    {
        if (_grid is null) return;

        await _grid.RefreshDataAsync();
    }
    private void OnClick( UserDto args)
    {
    // Store the clicked item in current_cell for further processing
        string s = $"{args.Age}";

    // Optionally, you can perform additional actions based on the clicked item
    // For example, you can update a property or trigger an event
    //StateHasChanged(); // Refresh the UI if needed
    }
}*/
 }