@page "/marimo"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel

<h3>Tree FluentDataGrid</h3>

<FluentBodyContent>
    <FluentStack>
        <div class="grid">
            <FluentDataGrid Items="@VisibleRows.AsQueryable()" TGridItem="Folder" Virtualize="true" ItemSize="30"
                DisplayMode="DataGridDisplayMode.Table" GenerateHeader="@GenerateHeaderOption.Sticky">
                <TemplateColumn TGridItem="Folder" Title="Tree-Name" Width="350px">
                    <ChildContent Context="item">
                        <div style="padding-left:@(item.Level * 15)px;">
                            @if (item.Children.Count() > 0)
                            {
                                <button class="e-flat" @onclick="() => ToggleExpand(item)">
                                    @(item.IsExpanded ? "▾" : "▸")
                                </button>
                            }
                            @item.Name
                        </div>
                    </ChildContent>
                </TemplateColumn>

                <TemplateColumn Title="Review_B">
                    <ChildContent Context="item">
                        <FluentButton Appearance="Appearance.Neutral" @onclick="@(() => button_click(item))">@item.Name
                        </FluentButton>
                    </ChildContent>
                </TemplateColumn>
                <PropertyColumn Property="@(item => item.Attributs.Review)" />
                <PropertyColumn Property="@(item => item.Attributs.Path)" />
                <PropertyColumn Property="@(item => item.Attributs.LongTerm)" />
                <PropertyColumn Property="@(item => item.Attributs._2025_Q4)" />
                <PropertyColumn Property="@(item => item.Attributs._2026_Q1)" />
                <PropertyColumn Property="@(item => item.Attributs._2026_Q2)" />
            </FluentDataGrid>
        </div>
    </FluentStack>
    <div style="width: 100%;">
        <p><em>The notebook embedded below is a playground notebook!</em></p>
        <iframe
        src="https://marimo.app/l/c7h6pz?embed=true&show-chrome=false"
        title="Kaspars Marimo Notebook"
        width="100%"
        height="500"
        frameborder="0"
        ></iframe>

    </div>

</FluentBodyContent>
@code {
    private List<Folder> TreeRoots = new();
    private List<Folder> VisibleRows = new();
    private RootFolder? rootFolder;

    //private Folder? current_cell;
    public string selected_folder_name = "No folder selected";
    public string selected_retention = "No retention selected";
    private void button_click(Folder cell)
    {
    }
    protected override void OnInitialized()
    {
        //looks like OnInitialized is called twice so lets check if we have already processed the root folder
        if (rootFolder != DataModel.Instance.GetRootFolder())
        {
            rootFolder = DataModel.Instance.GetRootFolder();
            if (rootFolder != null)
            {
                DataModel.Instance.SetRootFolder(rootFolder);
                rootFolder.FolderTree = DataModel.Instance.GenerateFolderTreeForRootFolder(rootFolder);
                TreeRoots = rootFolder.FolderTree.Children;
                RefreshVisibleRows();
            }
        }
    }

    private void ToggleExpand(Folder node)
    {
        node.IsExpanded = !node.IsExpanded;
        RefreshVisibleRows();
    }

    private void RefreshVisibleRows()
    {
        VisibleRows = FlattenVisible(TreeRoots);
    }

    private List<Folder> FlattenVisible(IEnumerable<Folder> nodes)
    {
        var result = new List<Folder>();
        foreach (var node in nodes)
        {
            result.Add(node);
            if (node.IsExpanded)
            {
                result.AddRange(FlattenVisible(node.Children));
            }
        }

        return result;
    }

    //private void OnCellClick(Folder cell)
    private void OnCellClick(Folder cell)
    {
        // Store the clicked item in current_cell for further processing
        //current_cell = cell.Item as Folder;
        //selected_folder_name = current_cell?.Name ?? "No folder selected";
        //selected_retention = $"{cell.GridColumn},{cell.Element}";


        // Optionally, you can perform additional actions based on the clicked item
        // For example, you can update a property or trigger an event
        //StateHasChanged(); // Refresh the UI if needed
    }

    /*

    <div class="card" Style="height: 300px; width: 100%; border: 2px dotted var(--accent-fill-rest)">
    <h4>panel for setting retentions</h4>
    <div>
    <h4>Folder:</h4>
    <FluentTextArea @bind-Value=@selected_folder_name style="width: 100%;"></FluentTextArea>
    </div>
    <div>
    <h4>Retention:</h4>
    <FluentTextField @bind-Value=selected_retention style="width: 100%;"></FluentTextField>
    </div>
    </div>


    <FluentDataGrid Items="@VisibleRows.AsQueryable()" TGridItem="Folder"
    VerticalAlignment="VerticalAlignment.Center" GenerateHeader="@GenerateHeaderOption.Sticky" Virtualize="true"
    ItemSize="30">

    <TemplateColumn TGridItem="Folder" Title="Tree-Name" Width="350px">
    <ChildContent Context="item">
    <div style="padding-left:@(item.Level * 15)px;">
    @if (item.Children.Count() > 0)
    {
    <button class="e-flat" @onclick="() => ToggleExpand(item)">
    @(item.IsExpanded ? "▾" : "▸")
    </button>
    }
    @item.Name
    </div>
    </ChildContent>
    </TemplateColumn>
    </FluentDataGrid>

    <PropertyColumn Property="@(item => item.Attributs.Review)"/>
    <PropertyColumn Property="@(item => item.Attributs.Path)"/>
    <PropertyColumn Property="@(item => item.Attributs.LongTerm)" />
    <PropertyColumn Property="@(item => item.Attributs._2025_Q4)" />
    <PropertyColumn Property="@(item => item.Attributs._2026_Q1)" />
    <PropertyColumn Property="@(item => item.Attributs._2026_Q2)" />
    <TemplateColumn TGridItem="Folder" Title="Review">
    <ChildContent Context="item">
    <FluentButton @onclick="() => OnCellClick(item)">@item.Attributs.Review</FluentButton>
    </ChildContent>
    </TemplateColumn>
    */
}
