@page "/retention"
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.Components.QuickGrid
@using VSM.Client.Datamodel

<h3>Retention settings</h3>
<div class="master-detail">
    <div class="master">
        <hr />
        <div class="grid">
            @*<QuickGrid Items="@VisibleRows.AsQueryable()" TGridItem="Folder" Style="height: 480px; width: 100%;"*@
            <QuickGrid Items="@VisibleRows.AsQueryable()" TGridItem="Folder" Virtualize="true">
                <TemplateColumn TGridItem="Folder" Title="Folders">
                    <ChildContent Context="item">
                        <div style="padding-left:@(item.Level * 15)px;">
                            @if (item.Children.Count() > 0)
                            {
                                <button class="e-flat" @onclick="() => ToggleExpand(item)">
                                    @(item.IsExpanded ? "▾" : "▸")
                                </button>
                            }
                            @item.Name
                        </div>
                    </ChildContent>
                </TemplateColumn>

                @foreach (var key in RetentionHeaders)
                {
                    <TemplateColumn TGridItem="Folder" Title="@key">
                        <ChildContent Context="item">
                            @if (item.AttributDict.TryGetValue(key, out var val))
                            {
                                <button class="e-flat" @onclick="() => OnCellClick(item, key)">
                                    @val
                                </button>
                            }
                        </ChildContent>
                    </TemplateColumn>
                }

            </QuickGrid>
        </div>
    </div>
    <div class="detail">
        <div class="property-panel-content" Style="height: 280px; width: 100%;">
            <hr />
            <table id="property" class="property-panel-table">
                <h2> Detail panel for settings retentions</h2>
            </table>
        </div>
    </div>
</div>

@code {

    bool clicked = false;
    List<string> RetentionHeaders = new List<string>();
    QuickGrid<Folder>? grid;
    private List<Folder> TreeRoots = new();
    private List<Folder> VisibleRows = new();
    private RootFolder? rootFolder;

    //private Folder? current_cell;
    public string selected_folder_name = "No folder selected";
    public string selected_retention = "No retention selected";
    private void button_click(Folder cell)
    {
    }
    protected override void OnInitialized()
    {
        //looks like OnInitialized is called twice so lets check if we have already processed the root folder
        rootFolder = DataModel.Instance.GetSelectedRootFolder();
        if (rootFolder != null)
        {
            if( rootFolder.FolderTree == null ){
                TreeRoots.Clear() ;
            } 
            else 
            {
                TreeRoots = rootFolder.FolderTree.Children;
                //set the first attrubute column  so we have something to click
                int ix = Math.Min(clickCount, RetentionHeaders_max.Length - 1);
                RetentionHeaders.Add(RetentionHeaders_max[ix]);
                clickCount++;
            }
        }
        RefreshVisibleRows();
    }


    private void ToggleExpand(Folder node)
    {
        node.IsExpanded = !node.IsExpanded;
        RefreshVisibleRows();
    }

    private void RefreshVisibleRows()
    {
        VisibleRows = FlattenVisible(TreeRoots);
    }

    private List<Folder> FlattenVisible(IEnumerable<Folder> nodes)
    {
        var result = new List<Folder>();
        foreach (var node in nodes)
        {
            result.Add(node);
            if (node.IsExpanded)
            {
                result.AddRange(FlattenVisible(node.Children));
            }
        }

        return result;
    }

    int clickCount = 0;
    string[] RetentionHeaders_max = [ "Review", "Path", "LongTerm", "_2025_Q4", "_2026_Q1", "_2026_Q2" ];
    private void OnCellClick(Folder node, string column)
    {
        Console.WriteLine($"Cell focused, clickCount: {node.Name}, {column}");
    }
}
