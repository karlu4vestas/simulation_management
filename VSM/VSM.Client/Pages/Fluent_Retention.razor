@page "/fluent_retention"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel

<h3>Retention settings</h3>

<FluentStack Orientation="Orientation.Vertical">
    <FluentBodyContent>
        <hr/>
        <div class="grid">
                <FluentDataGrid @ref="grid" Items="@VisibleRows.AsQueryable()" TGridItem="Folder" Virtualize="true" ItemSize ="25" 
                                ShowHover="true" DisplayMode="DataGridDisplayMode.Table" GenerateHeader="@GenerateHeaderOption.Sticky">

                    <TemplateColumn TGridItem="Folder" Title="Folders" Width="350px">
                        <ChildContent Context="item">
                            <div style="padding-left:@(item.Level * 15)px;">
                                @if (item.Children.Count() > 0)
                                {
                                    <button class="e-flat" @onclick="() => ToggleExpand(item)">
                                        @(item.IsExpanded ? "▾" : "▸")
                                    </button>
                                }
                                @item.Name
                        </div>
                        </ChildContent>
                    </TemplateColumn>                                


                    @foreach (var key in RetentionHeaders)
                    {
                        <TemplateColumn TGridItem="Folder" Title="@key">
                            <ChildContent Context="item">
                                @if( item.AttributDict.TryGetValue(key, out var val) ){
 
                                    var cellId = $"{item.Id}_{key}";
                                    var isSelected = selectedCellId == cellId;
                                    var buttonClass = isSelected ? "e-flat selected" : "e-flat";

                                    <button class="@buttonClass" @onclick="() => OnCellClick(item, key)">
                                        @val
                                    </button>
                                }
                            </ChildContent>
                        </TemplateColumn>
                    }

                </FluentDataGrid>
        </div>
    </FluentBodyContent>
    <FluentBodyContent>
        <hr />
        <h2> Detail panel for settings retentions</h2>
    </FluentBodyContent>
</FluentStack>

@code {

    bool clicked = false;
    List<string> RetentionHeaders = new  List<string>() ;
    FluentDataGrid<Folder>? grid;
    private List<Folder> TreeRoots = new();
    private List<Folder> VisibleRows = new();
    private RootFolder? rootFolder;
    string? selectedCellId;
    
    //private Folder? current_cell;
    public string selected_folder_name = "No folder selected";
    public string selected_retention = "No retention selected";
    private void button_click(Folder cell)
    {
    }
    protected override void OnInitialized()
    {
        //looks like OnInitialized is called twice so lets check if we have already processed the root folder
        rootFolder = DataModel.Instance.GetSelectedRootFolder();
        if (rootFolder != null)
        {
            rootFolder.FolderTree = DataModel.Instance.GetSelectedRootFolderTree();

            if( rootFolder.FolderTree == null ){
                TreeRoots.Clear() ;
            } else {
                TreeRoots = rootFolder.FolderTree.Children;

                //set the first attrubute column  so we have something to click
                int ix = Math.Min(clickCount, RetentionHeaders_max.Length - 1);
                RetentionHeaders.Add(RetentionHeaders_max[ix]);
                clickCount++;
            }
        }
        RefreshVisibleRows();
    }

    private void ToggleExpand(Folder node)
    {
        node.IsExpanded = !node.IsExpanded;
        RefreshVisibleRows();
    }

    private void RefreshVisibleRows()
    {
        VisibleRows = FlattenVisible(TreeRoots);
    }

    private List<Folder> FlattenVisible(IEnumerable<Folder> nodes)
    {
        var result = new List<Folder>();
        foreach (var node in nodes)
        {
            result.Add(node);
            if (node.IsExpanded)
            {
                result.AddRange(FlattenVisible(node.Children));
            }
        }

        return result;
    }

    int clickCount = 0;
    string[] RetentionHeaders_max = [ "Review", "Path", "LongTerm", "_2025_Q4", "_2026_Q1", "_2026_Q2" ];
    private void OnCellClick(Folder node, string key)
    {
        Console.WriteLine($"Cell focused, clickCount: {node.Name}, {key}");
        if( clickCount < RetentionHeaders_max.Length )
        {
            int ix = Math.Min(clickCount, RetentionHeaders_max.Length - 1);
            RetentionHeaders.Add(RetentionHeaders_max[ix]);
            clickCount++;
            clicked = !clicked;
        }

        var cellId = $"{node.Id}_{key}";
        if (selectedCellId != cellId)
        {
            selectedCellId = cellId; // Select new cell
        }
    }
    private void OnRowClick(FluentDataGridCell<Folder> cell)
    {
        //Console.WriteLine($"Cell focused : {cell.GridColumn}, {cell.Column.Title}");
        Console.WriteLine($"Cell focused : {cell.GridColumn}");
    }
}
