@page "/fluent_retention"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel

<h3>Retention settings</h3>

<FluentStack Orientation="Orientation.Vertical">
    <FluentBodyContent>
        <hr/>
        <div class="grid">
                <FluentDataGrid @ref="grid" Items="@VisibleRows.AsQueryable()" TGridItem="Folder" Virtualize="true" ItemSize ="25" 
                                ShowHover="true" DisplayMode="DataGridDisplayMode.Table" GenerateHeader="@GenerateHeaderOption.Sticky">

                    <TemplateColumn TGridItem="Folder" Title="Folders" Width="350px">
                        <ChildContent Context="item">
                            <div style="padding-left:@(item.Level * 15)px;">
                                @if (item.Children.Count() > 0)
                                {
                                    <button class="e-flat" @onclick="() => ToggleExpand(item)">
                                        @(item.IsExpanded ? "▾" : "▸")
                                    </button>
                                }
                                @item.Name
                        </div>
                        </ChildContent>
                    </TemplateColumn>                                

                    @if( rootFolder!=null ){
                        @foreach (var key in rootFolder.RetentionHeaders)
                        {
                            <TemplateColumn TGridItem="Folder" Title="@key">
                                <ChildContent Context="item">
                                    @if( item.AttributDict.TryGetValue(key, out var val) ){
    
                                        var cellId = $"{item.Id}_{key}";
                                        var isSelected = selectedCellId == cellId;
                                        var buttonClass = isSelected ? "e-flat selected" : "e-flat";

                                        <button class="@buttonClass" @onclick="() => OnCellClick(item, key)">
                                            @val
                                        </button>
                                    }
                                </ChildContent>
                            </TemplateColumn>
                        }
                    }

                </FluentDataGrid>
        </div>
    </FluentBodyContent>
    <FluentBodyContent>
        <hr />
        <h2> Review and change retention</h2>
        @if( selected_cell != null && selected_cell is var (folder, retention_key) ){
            string folder_name = folder.Name;
            string retention   = retention_key;
            <div style="display: flex; align-items: center; gap: 10px;">
                <span>Folder: </span>
                <span>@folder_name</span>
            </div>            
            <div style="display: flex; align-items: center; gap: 10px;">
                <span>Current Retention: </span>
                <span>@folder_name</span>
            </div>            
            <div style="display: flex; align-items: center; gap: 10px;">
                <span>New retention: </span>
                <FluentComboBox Items="@retentionOptions" 
                                @bind="@selectedRetention"
                                OnSelectedOptionChanged="@OnRetentionChanged"
                                Placeholder="Select retention period">
                </FluentComboBox>
            </div>            
        }

    </FluentBodyContent>
</FluentStack>

@code {

    FluentDataGrid<Folder>? grid;
    private List<Folder> TreeRoots = new();
    private List<Folder> VisibleRows = new();
    public  RootFolder? rootFolder { get; set; }
    private List<string> retentionOptions = new List<string>
    {
        "Review", "Path", "LongTerm", "_2025_Q4", "_2026_Q1", "_2026_Q2"
    };
    
    private string? selectedRetention;

    // change selectedCellId to use selected_cell
    string? selectedCellId;
    (Folder folder, string retention_key)? selected_cell = null;
    
    public string selected_folder_name = "No folder selected";
    public string selected_retention = "No retention selected";
    protected override void OnInitialized()
    {
        //looks like OnInitialized is called twice so lets check if we have already processed the root folder
        if( rootFolder != DataModel.Instance.GetSelectedRootFolder() ) 
        {
            rootFolder = DataModel.Instance.GetSelectedRootFolder(); 
            if( rootFolder.FolderTree == null ){
                TreeRoots.Clear() ;
            } else {
                TreeRoots = rootFolder.FolderTree.Children;
            }

            if( rootFolder.FolderTree != null )
                rootFolder.FolderTree.UpdateAggregation(); 

        }
        RefreshVisibleRows();
    }

    private void ToggleExpand(Folder node)
    {
        node.IsExpanded = !node.IsExpanded;
        RefreshVisibleRows();
    }

    private void RefreshVisibleRows()
    {
        VisibleRows = FlattenVisible(TreeRoots);
    }

    private List<Folder> FlattenVisible(IEnumerable<Folder> nodes)
    {
        var result = new List<Folder>();
        foreach (var node in nodes)
        {
            result.Add(node);
            if (node.IsExpanded)
            {
                result.AddRange(FlattenVisible(node.Children));
            }
        }

        return result;
    }

    private void OnCellClick(Folder node, string key)
    {
        selected_cell = (node,key);
        Console.WriteLine($"Cell focused, clickCount: {node.Name}, {key}");

        var cellId = $"{node.Id}_{key}";
        if (selectedCellId != cellId)
        {
            selectedCellId = cellId; // Select new cell
        }
    }

    private void OnRetentionChanged(string? newRetention)
    {
        selectedRetention = newRetention;
        Console.WriteLine($"Retention changed to: {newRetention}");
        
        // If you have a selected cell, you can update the folder's retention here
        if (selected_cell is var (folder, retention_key) && newRetention != null)
        {
            // Update the folder's retention or perform other actions
            folder.Retention = newRetention;
            Console.WriteLine($"Updated folder {folder.Name} retention to {newRetention}");
            
            // Optionally refresh the grid or perform other updates
            StateHasChanged();
        }
    }

    /*private async Task OnRetentionChangedAsync(string? newRetention)
    {
        selectedRetention = newRetention;
        Console.WriteLine($"Retention changed to: {newRetention}");
        
        if (selected_cell is var (folder, retention_key) && newRetention != null)
        {
            folder.Retention = newRetention;
            await InvokeAsync(StateHasChanged);
        }
    }*/        
}
