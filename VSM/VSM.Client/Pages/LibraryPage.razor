@page "/library"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel
@inject NavigationManager Navigation

<PageTitle>Library</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    @if (Library.Instance.UsersRootFolders.Count == 0)
    {
        <div style="display:flex">
            <p>Login to access your simulations:</p>
            <FluentTextField @bind-Value="@Library.Instance.User" Placeholder="your initials"></FluentTextField>
            <FluentButton OnClick="@OnLoginClicked" Appearance="Appearance.Accent">Login</FluentButton>
        </div>

        if (has_loaded_rootFolders)
        {
            <div style="display:flex">
                <p>Load of root folders has failed or you are not owner or approver of any root folder! </p>
            </div>
        }
    }
    else
    {
        <FluentStack Orientation="Orientation.Vertical">
            <p>User: @Library.Instance.User</p>
            <hr />
            <div class="grid">
                <FluentDataGrid Items="@Library.Instance.UsersRootFolders.AsQueryable()" TGridItem="RootFolder"
                    OnRowClick="OnSelectRootFolder" ShowHover="true" DisplayMode="DataGridDisplayMode.Table"
                    GenerateHeader="@GenerateHeaderOption.Sticky" MultiLine="true">

                    <PropertyColumn Title="Secure folder" Property="@(folder => folder.Root_path)" Width="400px" />

                    <TemplateColumn Title="Owners" Width="300px">
                        <ChildContent Context="folder">
                            @string.Join(", ", folder.AllInitials)
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Cleanup frequency" Width="160px">
                        <ChildContent Context="folder">
                            @($"{frequencyConverter.GetName(folder.CleanupConfiguration.CleanupFrequency)}")
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Cycle time" Width="160px">
                        <ChildContent Context="folder">
                            @($"{cycleTimeConverter.GetName(folder.CleanupConfiguration.CycleTime)}")
                        </ChildContent>
                    </TemplateColumn>
                    <TemplateColumn Title="Retentions" Width="300px">
                        <ChildContent Context="folder">
                            @if (folder.CleanupConfiguration.CanStartCleanup)
                            {
                                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Go2retention(folder))">Go to
                                    retentions</FluentButton>
                            }
                            else
                            {
                                <FluentButton Appearance="Appearance.Neutral" Disabled="true">-</FluentButton>
                            }
                        </ChildContent>
                    </TemplateColumn>
                </FluentDataGrid>
            </div>
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical">
            <hr />
            @if (Library.Instance.SelectedRootFolder != null)
            {
                <div style="display:flex"><span style="width: 170px; display: inline-block;">Secure folder:</span>
                    @Library.Instance.SelectedRootFolder.Root_path </div>
                string ownerstring = string.Join(", ", Library.Instance.SelectedRootFolder.AllInitials);
                <div style="display:flex"><span style="width: 170px; display: inline-block;">Owners & approvers:</span>
                    @ownerstring</div>
                <div style="display:flex"><span style="width: 170px; display: inline-block;">Cycle time:</span>
                    <FluentCombobox Autofocus="true" Items="@cycleTimeConverter?.Names()" @bind-Value="@cycle_time_name"
                        @bind-Value:after="UpdateCleanUpConfiguration" Height="300px" Position="SelectPosition.Above" Immediate
                        ImmediateDelay="100" />
                    <span style="width: 320px; display: inline-block;"> - days needed to analyse a simulation</span>
                </div>
                <div style="display:flex"><span style="width: 170px; display: inline-block;">Cleanup frequency</span>
                    <FluentCombobox Autofocus="true" Items="@frequencyConverter?.Names()" @bind-Value="@cleanupfrequency_name"
                        @bind-Value:after="UpdateCleanUpConfiguration" Height="300px" Position="SelectPosition.Above" Immediate
                        ImmediateDelay="100" />
                    <span style="width: 260px; display: inline-block;"> Days between cleanups</span>
                </div>
            }
        </FluentStack>
    }
</FluentStack>
@code {
    public class NamesDays
    {
        public string Name { get; set; } = "";
        public int Days { get; set; }
    }
    public class NamesDaysLookup
    {
        private readonly string _defaultName;
        private readonly int _defaultDays;
        private readonly Dictionary<string, int> _nameToDays;
        private readonly Dictionary<int, string> _daysToName;
        public NamesDaysLookup(IEnumerable<NamesDays> items)
        {
            var list = items.ToList();
            if (list.Count == 0)
                list.Add(new NamesDays());

            // store first entry as fallback
            _defaultName = list[0].Name;
            _defaultDays = list[0].Days;

            _nameToDays = list.ToDictionary(x => x.Name, x => x.Days);
            _daysToName = list.ToDictionary(x => x.Days, x => x.Name);
        }
        public List<string> Names() => _nameToDays.Keys.ToList();
        public int GetDays(string name) => _nameToDays.TryGetValue(name, out var days) ? days : _defaultDays;
        public string GetName(int days) => _daysToName.TryGetValue(days, out var name) ? name : _defaultName;
    }


    bool has_loaded_rootFolders = false;
    CleanupConfigurationDTO cleanup_config = new CleanupConfigurationDTO();
    string cleanupfrequency_name = "";
    string cycle_time_name = "";
    NamesDaysLookup frequencyConverter = new NamesDaysLookup(new List<NamesDays>());
    NamesDaysLookup cycleTimeConverter = new NamesDaysLookup(new List<NamesDays>());

    async Task OnLoginClicked()
    {
        if (Library.Instance.User.Length > 0)
        {
            try
            {
                has_loaded_rootFolders = false;
                // Ensure UI shows loading state. well later if we implement it
                await InvokeAsync(StateHasChanged);

                // first load retention options because we need them to generate testdata and folder structure
                await Library.Instance.Load();

                frequencyConverter = new NamesDaysLookup(
                Library.Instance.CleanupFrequencies.Select(x => new NamesDays { Name = x.Name, Days = x.Days }));
                cycleTimeConverter = new NamesDaysLookup(
                Library.Instance.CycleTimes.Select(x => new NamesDays { Name = x.Name, Days = x.Days }));

                has_loaded_rootFolders = true;
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    //selecte the folder for the details panel
    private void OnSelectRootFolder(FluentDataGridRow<RootFolder> row)
    {
        Library.Instance.SelectedRootFolder = row.Item;
        if (Library.Instance.SelectedRootFolder != null)
        {
            cleanup_config = Library.Instance.SelectedRootFolder.CleanupConfiguration;
            cleanupfrequency_name = frequencyConverter.GetName(cleanup_config.CleanupFrequency);
            cycle_time_name = cycleTimeConverter.GetName(cleanup_config.CycleTime);
        }
        StateHasChanged();
    }
    private async Task UpdateCleanUpConfiguration()
    {
        if (Library.Instance.SelectedRootFolder != null && cleanupfrequency_name.Length > 0 && cycle_time_name.Length > 0)
        {
            cleanup_config.CleanupFrequency = frequencyConverter.GetDays(cleanupfrequency_name);
            cleanup_config.CycleTime = cycleTimeConverter.GetDays(cycle_time_name);

            if (cleanup_config.CanStartCleanup)
            {
                UpdateCleanupConfigurationCmd cmd = new UpdateCleanupConfigurationCmd(Library.Instance.SelectedRootFolder, cleanup_config);
                await cmd.Apply();
                StateHasChanged();
                Console.WriteLine($"new cleanupfrequency:{Library.Instance.SelectedRootFolder?.CleanupConfiguration}");
            }
        }
    }
    private void Go2retention(RootFolder root_folder)
    {
        Library.Instance.SelectedRootFolder = root_folder;
        Navigation.NavigateTo("retention");
    }
}