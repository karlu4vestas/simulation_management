@page "/library"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel
@inject NavigationManager Navigation

<PageTitle>Library</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    @if (Library.Instance.UsersRootFolders.Count == 0)
    {
        <div style="display:flex">
            <p>Login to access your simulations:</p>
            <FluentTextField @bind-Value="@Library.Instance.User" Placeholder="your initials"></FluentTextField>
            <FluentButton OnClick="@OnLoginClicked" Appearance="Appearance.Accent">Login</FluentButton>
        </div>

        if (has_loaded_rootFolders)
        {
            <div style="display:flex">
                <p>Load of root folders has failed or you are not owner or approver of any root folder! </p>
            </div>
        }
    }
    else
    {
        <FluentStack Orientation="Orientation.Vertical">
            <p>User: @Library.Instance.User</p>
            <hr />
            <div class="grid">
                <FluentDataGrid Items="@Library.Instance.UsersRootFolders.AsQueryable()" TGridItem="RootFolder"
                    OnRowClick="OnSelectRootFolder" ShowHover="true" DisplayMode="DataGridDisplayMode.Table"
                    GenerateHeader="@GenerateHeaderOption.Sticky" MultiLine="true">

                    <PropertyColumn Title="Secure folder" Property="@(folder => folder.Root_path)" Width="400px" />

                    <TemplateColumn Title="Owners" Width="300px">
                        <ChildContent Context="folder">
                            @string.Join(", ", folder.AllInitials)
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Cleanup frequency" Width="300px">
                        <ChildContent Context="folder">
                            @(folder.Cleanup_Frequency)
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Retentions" Width="300px">
                        <ChildContent Context="folder">
                            @if (folder.Cleanup_Frequency != null && folder.Cleanup_Frequency != "inactive")
                            {
                                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Go2retention(folder))">Go to
                                    retentions</FluentButton>
                            }
                            else
                            {
                                <FluentButton Appearance="Appearance.Neutral" Disabled="true">-</FluentButton>
                            }
                        </ChildContent>
                    </TemplateColumn>
                </FluentDataGrid>
            </div>
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical">
            <hr />
            @if (Library.Instance.SelectedRootFolder != null)
            {
                <div style="display:flex"><span style="width: 160px; display: inline-block;">Secure folder:</span>
                    @Library.Instance.SelectedRootFolder.Root_path </div>
                string ownerstring = string.Join(", ", Library.Instance.SelectedRootFolder.AllInitials);
                <div style="display:flex"><span style="width: 160px; display: inline-block;">Owners & approvers:</span>
                    @ownerstring</div>
                <div style="display:flex"><span style="width: 160px; display: inline-block;">Cleanup frequency:</span>
                    <FluentCombobox Autofocus="true" Items="@Library.Instance.CleanupFrequencies"
                        @bind-Value="@cleanup_frequency" @bind-Value:after="UpdateCleanUpFrequency" Height="300px"
                        Position="SelectPosition.Above" Immediate ImmediateDelay="100" />
                </div>
            }
        </FluentStack>
    }
</FluentStack>
@code {
    bool has_loaded_rootFolders = false;
    string cleanup_frequency = "";
    async Task OnLoginClicked()
    {
        if (Library.Instance.User.Length > 0)
        {
            try
            {
                has_loaded_rootFolders = false;
                // Ensure UI shows loading state. well later if we implement it
                await InvokeAsync(StateHasChanged);

                // first load retention options because we need them to generate testdata and folder structure
                await Library.Instance.Load();
                has_loaded_rootFolders = true;
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    //selecte the folder for the details panel
    private void OnSelectRootFolder(FluentDataGridRow<RootFolder> row)
    {
        Library.Instance.SelectedRootFolder = row.Item;
        if (Library.Instance.SelectedRootFolder != null)
            cleanup_frequency = Library.Instance.SelectedRootFolder.Cleanup_Frequency;
        StateHasChanged();
    }
    private async Task UpdateCleanUpFrequency()
    {
        if (Library.Instance.SelectedRootFolder != null && cleanup_frequency !=
        Library.Instance.SelectedRootFolder.Cleanup_Frequency)
        {
            UpdateFrequencyCmd cmd = new UpdateFrequencyCmd(Library.Instance.SelectedRootFolder, cleanup_frequency);
            await cmd.Apply();
            cleanup_frequency = Library.Instance.SelectedRootFolder.Cleanup_Frequency;
            StateHasChanged();
            Console.WriteLine($"new cleanup_frequency:{Library.Instance.SelectedRootFolder?.Cleanup_Frequency}");
        }
    }
    private void Go2retention(RootFolder root_folder)
    {
        Library.Instance.SelectedRootFolder = root_folder;
        Navigation.NavigateTo("retention");
    }
}