@page "/library"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel
@inject NavigationManager Navigation

<PageTitle>Library</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    @if (DataModel.Instance.TheUsersRootFolders.Count==0)
    {
        <div style="display:flex">
            <p>Login to access your simulations:</p>
            <FluentTextField @bind-Value="@DataModel.Instance.User" Placeholder="your initials"></FluentTextField>
            <FluentButton OnClick="@OnLoginClicked" Appearance="Appearance.Accent">Login</FluentButton>
        </div>

        if(has_loaded_rootFolders){
            <div style="display:flex">
                <p>Load of root folders has failed or you are not owner or approver of any root folder! </p>            
            </div>
        }
    }
    else
    {
        <FluentBodyContent>
            <p>User: @DataModel.Instance.User</p>
            <hr />
            <div class="grid">
                <FluentDataGrid Items="@DataModel.Instance.TheUsersRootFolders.AsQueryable()" TGridItem="RootFolder"
                    OnRowClick="OnSelectRootFolder" ShowHover="true" DisplayMode="DataGridDisplayMode.Table"
                    GenerateHeader="@GenerateHeaderOption.Sticky">

                    <PropertyColumn Property="@(folder => folder.Root_path)" />

                    <TemplateColumn Title="Owners">
                        <ChildContent Context="folder">
                            @string.Join(", ", folder.AllInitials)
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Active cleanup">
                        <ChildContent Context="folder">
                            @(folder.Is_registeredfor_cleanup ? "X" : "")
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Go to Retention">
                        <ChildContent Context="folder">
                            @if (folder.Is_registeredfor_cleanup)
                            {
                                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Go2retention(folder))">Retentions
                                </FluentButton>
                            }
                            else
                            {
                                <FluentButton Appearance="Appearance.Neutral" Disabled="true">-</FluentButton>
                            }
                        </ChildContent>
                    </TemplateColumn>
                </FluentDataGrid>
            </div>

        </FluentBodyContent>
        <FluentBodyContent>
            <hr />
            @if (DataModel.Instance.SelectedRootFolder != null)
            {
                string ownerstring = string.Join(", ", DataModel.Instance.SelectedRootFolder.AllInitials);
                <div style="display:flex"><span style="width: 80px; display: inline-block;">Root-path:</span>
                    @DataModel.Instance.SelectedRootFolder.Root_path </div>
                <p></p>
                <div style="display:flex"><span style="width: 80px; display: inline-block;">Owners:</span> @ownerstring
                    AriaLabel</div>
                <p></p>
                string toggle_subscription = DataModel.Instance.SelectedRootFolder.Is_registeredfor_cleanup ? "Unsubscribe from cleanup" :
                "Subscribe to cleanup";
                <div style="display:flex">Change the subscription to the cleanup process:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <FluentButton Appearance="Appearance.Accent" @onclick="@(() => ToggleCleanupProcess())">
                        @toggle_subscription</FluentButton>
                </div>
            }
        </FluentBodyContent>
    }
</FluentStack>
@code {
    bool has_loaded_rootFolders = false;    

    async Task OnLoginClicked()
    {
        if (DataModel.Instance.User.Length > 0)
        {
            try
            {
                has_loaded_rootFolders = false;
                // Ensure UI shows loading state. well later if we implement it
                await InvokeAsync(StateHasChanged);

                // first load retention options because we need them to generate testdata and folder structure
                await DataModel.Instance.LoadTheUsersRootFolders();
                has_loaded_rootFolders = true;
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    //selecte the folder for the details panel
    private void OnSelectRootFolder(FluentDataGridRow<RootFolder> row)
    {
        DataModel.Instance.SelectedRootFolder = row.Item;
    }
    private void ToggleCleanupProcess()
    {
        if (DataModel.Instance.SelectedRootFolder != null)
        {
            DataModel.Instance.SelectedRootFolder.Is_registeredfor_cleanup = !DataModel.Instance.SelectedRootFolder.Is_registeredfor_cleanup;
        }
    }
    private void Go2retention(RootFolder root_folder)
    {
        DataModel.Instance.SelectedRootFolder = root_folder;
        Navigation.NavigateTo("retention");
    }
}