@page "/library"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel
@inject NavigationManager Navigation

<PageTitle>Library</PageTitle>

<FluentStack Orientation="Orientation.Vertical">

    <div style="display:flex">
        <p>Login to access your simulations:</p>
        <FluentTextField @bind-Value="user_initials" Placeholder="your initials"></FluentTextField>

        <FluentButton OnClick="@StartLoadingAsync" Appearance="Appearance.Accent">Login</FluentButton>

    </div>

    @if (is_logged_in)
    {
        <FluentBodyContent>
            <hr />
            <div class="grid">
                <FluentDataGrid @ref="grid" Items="@rootFolders.AsQueryable()" TGridItem="RootFolder"
                    OnRowClick="HandleRowClick" ShowHover="true" DisplayMode="DataGridDisplayMode.Table"
                    GenerateHeader="@GenerateHeaderOption.Sticky">

                    <PropertyColumn Property="@(folder => folder.Root_path)" />

                    <TemplateColumn Title="Owners">
                        <ChildContent Context="folder">
                            @string.Join(", ", folder.Users.Select(u => u.Initials))
                        </ChildContent>
                    </TemplateColumn>


                    <TemplateColumn Title="Active cleanup">
                        <ChildContent Context="folder">
                            @(folder.Is_registeredfor_cleanup ? "X" : "")
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Go to Retention">
                        <ChildContent Context="folder">
                            @if (folder.Is_registeredfor_cleanup)
                            {
                                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Go2retention(folder))">Retentions
                                </FluentButton>
                            }
                            else
                            {
                                <FluentButton Appearance="Appearance.Neutral" Disabled="true">-</FluentButton>
                            }
                        </ChildContent>
                    </TemplateColumn>
                </FluentDataGrid>
            </div>

        </FluentBodyContent>
        <FluentBodyContent>
            <hr />
            @if (selected_root_folder != null)
            {
                string ownerstring = string.Join(", ", selected_root_folder.Users.Select(u => u.Initials));
                <div style="display:flex"><span style="width: 80px; display: inline-block;">Root-path:</span> @selected_root_folder.Root_path  </div>
                <p></p>
                <div style="display:flex"><span style="width: 80px; display: inline-block;">Owners:</span> @ownerstring AriaLabel</div>
                <p></p>
                string toggle_subscription = selected_root_folder.Is_registeredfor_cleanup ? "Unsubscribe from cleanup" : "Subscribe to cleanup";
                <div style="display:flex">Change the subscription to the cleanup process:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FluentButton Appearance="Appearance.Accent"
                        @onclick="@(() => ToggleCleanupProcess(selected_root_folder))">@toggle_subscription</FluentButton>
                </div>

            }
        </FluentBodyContent>

    }

</FluentStack>
@code {
    FluentDataGrid<RootFolder>? grid;
    RootFolder? selected_root_folder;

    string? user_initials;
    bool is_logged_in = false;


    List<RootFolder> rootFolders = new List<RootFolder>();

    /*
    //---------test start--------
    bool DeferredLoading = false;
    TabSize size=TabSize.Large;

    string? activeid = "tab-3";
    FluentTab? changedto;

    private void HandleOnTabChange(FluentTab tab)
    {
    changedto = tab;
    }

    //------test slut--------
    */
    private void Login()
    {
        user_initials = user_initials ?? "";
    }

    async Task StartLoadingAsync()
    {
        if (user_initials != null && user_initials.Length > 0)
        {
            DataModel.Instance.PerformUserLogIn(user_initials);
            is_logged_in = user_initials != null && user_initials.Length > 0;
            UpdateFolders();
            //await DataSource.WaitAsync(2000, () => loading = false);
            await Task.Delay(2000);
        }
    }

    private void UpdateFolders()
    {
        rootFolders = DataModel.Instance.GetRootFoldersForUser();

    }
    private void HandleRowClick(FluentDataGridRow<RootFolder> row)
    {
        if (row.Item != null)
        {
            Console.WriteLine($"Row clicked: {row.Item.Root_path}");
            selected_root_folder = row.Item;
        }
    }
    private void ToggleCleanupProcess(RootFolder root_folder)
    {
        if (root_folder != null)
        {
            root_folder.Is_registeredfor_cleanup = !root_folder.Is_registeredfor_cleanup;
        }
    }

    private void Go2retention(RootFolder root_folder)
    {
        if (root_folder != null)
        {
            DataModel.Instance.SetRootFolder(root_folder);
            Navigation.NavigateTo("retention");
        }
    }
}