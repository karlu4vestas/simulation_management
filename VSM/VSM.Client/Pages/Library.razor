@page "/library"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel
@inject NavigationManager Navigation

<PageTitle>Library</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    @if (!is_logged_in)
    {
        <div style="display:flex">
            <p>Login to access your simulations:</p>
            <FluentTextField @bind-Value="@user" Placeholder="your initials"></FluentTextField>

            <FluentButton OnClick="@OnLoginClicked" Appearance="Appearance.Accent">Login</FluentButton>
        </div>
    }
    else
    {
        <FluentBodyContent>
            <hr />
            <div class="grid">
                <FluentDataGrid @ref="grid" Items="@rootFolders.AsQueryable()" TGridItem="RootFolder"
                    OnRowClick="OnSelectRootFolder" ShowHover="true" DisplayMode="DataGridDisplayMode.Table"
                    GenerateHeader="@GenerateHeaderOption.Sticky">

                    <PropertyColumn Property="@(folder => folder.Root_path)" />

                    <TemplateColumn Title="Owners">
                        <ChildContent Context="folder">
                            @string.Join(", ", folder.Users.Select(u => u.Initials))
                        </ChildContent>
                    </TemplateColumn>


                    <TemplateColumn Title="Active cleanup">
                        <ChildContent Context="folder">
                            @(folder.Is_registeredfor_cleanup ? "X" : "")
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Go to Retention">
                        <ChildContent Context="folder">
                            @if (folder.Is_registeredfor_cleanup)
                            {
                                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Go2retention(folder))">Retentions
                                </FluentButton>
                            }
                            else
                            {
                                <FluentButton Appearance="Appearance.Neutral" Disabled="true">-</FluentButton>
                            }
                        </ChildContent>
                    </TemplateColumn>
                </FluentDataGrid>
            </div>

        </FluentBodyContent>
        <FluentBodyContent>
            <hr />
            @if (selected_root_folder != null)
            {
                string ownerstring = string.Join(", ", selected_root_folder.Users.Select(u => u.Initials));
                <div style="display:flex"><span style="width: 80px; display: inline-block;">Root-path:</span>
                    @selected_root_folder.Root_path </div>
                <p></p>
                <div style="display:flex"><span style="width: 80px; display: inline-block;">Owners:</span> @ownerstring
                    AriaLabel</div>
                <p></p>
                string toggle_subscription = selected_root_folder.Is_registeredfor_cleanup ? "Unsubscribe from cleanup" :
                "Subscribe to cleanup";
                <div style="display:flex">Change the subscription to the cleanup process:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <FluentButton Appearance="Appearance.Accent" @onclick="@(() => ToggleCleanupProcess(selected_root_folder))">
                        @toggle_subscription</FluentButton>
                </div>

            }
        </FluentBodyContent>

    }

</FluentStack>
@code {
    FluentDataGrid<RootFolder>? grid;
    RootFolder? selected_root_folder;

    string? initials;
    string? user
    {
        get { return DataModel.Instance.User != null ? DataModel.Instance.User.Initials : initials; }
        set { initials = value; }
    }

    bool is_logged_in { get { return DataModel.Instance.User != null && DataModel.Instance.User.Initials.Length > 0; } }

    List<RootFolder> rootFolders { get{ return DataModel.Instance.GetRootFoldersForUser();} }

    async Task OnLoginClicked()
    {
        if (initials != null && initials.Length > 0 && DataModel.Instance.User==null)
        {
            DataModel.Instance.User = new User(initials);
            await Task.Delay(2000);
        }
    }

    //selecte the folder for the details panel
    private void OnSelectRootFolder(FluentDataGridRow<RootFolder> row)
    {
        if (row.Item != null)
        {
            selected_root_folder = row.Item;
        }
    }
    private void ToggleCleanupProcess(RootFolder root_folder)
    {
        if (root_folder != null)
        {
            root_folder.Is_registeredfor_cleanup = !root_folder.Is_registeredfor_cleanup;
        }
    }
    private void Go2retention(RootFolder root_folder)
    {
        if (root_folder != null)
        {
            DataModel.Instance.SetSelectedRootFolder(root_folder);
            //_ = Task.Run(() => Navigation.NavigateTo("fluent_retention"));
            
            //InvokeAsync(() => Navigation.NavigateTo("fluent_retention",forceLoad: true));
            Navigation.NavigateTo("fluent_retention");
                
        }
    }
}