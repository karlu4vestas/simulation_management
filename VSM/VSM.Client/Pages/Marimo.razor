@page "/marimo"
@rendermode InteractiveAuto
@using Microsoft.FluentUI.AspNetCore.Components
@using VSM.Client.Datamodel

<h3>Tree FluentDataGrid</h3>

<FluentBodyContent>
    <FluentStack>
        <div class="grid">
                 <FluentDataGrid @ref="grid" Items="@VisibleRows.AsQueryable()" TGridItem="TreeNode" Virtualize="true" ItemSize ="25" 
                                ShowHover="true" DisplayMode="DataGridDisplayMode.Table" GenerateHeader="@GenerateHeaderOption.Sticky"
                                OnCellClick="OnCellClick">

                    <TemplateColumn TGridItem="TreeNode" Title="TreeNodes" Width="350px">
                        <ChildContent Context="item">
                            <div style="padding-left:@(item.Level * 15)px;">
                                @if (item is InnerNode innerNode && innerNode.Children.Count() > 0)
                                {
                                    <button class="e-flat" @onclick="() => ToggleExpand(item)">
                                        @(item.IsExpanded ? "▾" : "▸")
                                    </button>
                                }
                                @item.Name
                        </div>
                        </ChildContent>
                    </TemplateColumn>                                

                    @foreach (var key in RetentionHeaders)
                    {
                        <TemplateColumn TGridItem="TreeNode" Title="@key">
                            <ChildContent Context="item">
                                @((item.AttributDict.TryGetValue(key, out var val)) ? val : null)
                            </ChildContent>
                        </TemplateColumn>
                    }

                </FluentDataGrid>
        </div>
    </FluentStack>
    <div style="width: 100%;">
        <p><em>The notebook embedded below is a playground notebook!</em></p>
        <iframe
        src="https://marimo.app/l/c7h6pz?embed=true&show-chrome=false"
        title="Kaspars Marimo Notebook"
        width="100%"
        height="500"
        frameborder="0"
        ></iframe>

    </div>

</FluentBodyContent>
@code {

    bool clicked = false;
    List<string> RetentionHeaders = new  List<string>() ;
    FluentDataGrid<TreeNode>? grid;
    private List<TreeNode> TreeRoots = new();
    private List<TreeNode> VisibleRows = new();
    private RootFolder? rootFolder;

    //private TreeNode? current_cell;
    public string selected_TreeNode_name = "No TreeNode selected";
    public string selected_retention = "No retention selected";
    private void button_click(TreeNode cell)
    {
    }
    protected override void OnInitialized()
    {
        //looks like OnInitialized is called twice so lets check if we have already processed the root TreeNode
        if (rootFolder != DataModel.Instance.GetSelectedRootFolder())
        {
            rootFolder = DataModel.Instance.GetSelectedRootFolder();
            if( rootFolder != null ){
                if( rootFolder.FolderTree == null ){
                    TreeRoots.Clear();
                } else if( rootFolder.FolderTree is InnerNode innerNode ) {
                    TreeRoots = innerNode.Children;
                }

                if( rootFolder.FolderTree != null )
                    rootFolder.FolderTree.UpdateAggregation();
            }
            RefreshVisibleRows();
        }
    }

    private void ToggleExpand(TreeNode node)
    {
        node.IsExpanded = !node.IsExpanded;
        RefreshVisibleRows();
    }

    private void RefreshVisibleRows()
    {
        VisibleRows = FlattenVisible(TreeRoots);
    }

    private List<TreeNode> FlattenVisible(IEnumerable<TreeNode> nodes)
    {
        var result = new List<TreeNode>();
        foreach (var node in nodes)
        {
            result.Add(node);
            if (node.IsExpanded && node is InnerNode innerNode)
            {
                result.AddRange(FlattenVisible(innerNode.Children));
            }
        }

        return result;
    }

    int clickCount = 0;
    string[] RetentionHeaders_max = [ "Review", "Path", "LongTerm", "_2025_Q4", "_2026_Q1", "_2026_Q2" ];
    private void OnCellClick(FluentDataGridCell<TreeNode> cell)
    {
        Console.WriteLine($"Cell focused, clickCount : {cell.GridColumn},  {clickCount}");
        if( clickCount < RetentionHeaders_max.Length )
        {
            int ix = Math.Min(clickCount, RetentionHeaders_max.Length - 1);
            RetentionHeaders.Add(RetentionHeaders_max[ix]);
            clickCount++;
            clicked = !clicked;
        }
    }
    private void OnRowClick(FluentDataGridCell<TreeNode> cell)
    {
        //Console.WriteLine($"Cell focused : {cell.GridColumn}, {cell.Column.Title}");
        Console.WriteLine($"Cell focused : {cell.GridColumn}");

    }
}